class Solution {
    public int maxValue(int n, int index, int maxSum) {
        //left side array size
        long left = index;
        //right side array size
        long right = n - index-1;

        //value rage of index element
        long low = 1;
        long high = maxSum;

        //result varable
        long res =0;

        while(low<=high){
            long mid = (high-low)/2 + low;
            long m = mid -1 ;

            long rightSum =0;
            long leftSum =0;
            long sum = mid;
            
            // Sum of right side array after index
            if(m >= right){
                rightSum = m*(m+1)/2 - ((m-right)*(m-right+1)/2);
            }else{
                rightSum = m*(m+1)/2 + (right-m);
            }

            // Sum of left side array after index
            if(m >= left){
                leftSum = m*(m+1)/2 - ((m-left)*(m-left+1)/2);
            }//any array number will be 1 or greater than 1
            else{
                leftSum = m*(m+1)/2 + (left-m);
            }

            if(leftSum+rightSum+sum <= maxSum){
                res = mid;
                low = mid+1;
            }else{
                high = mid-1;
            }
        }

        return (int) res;
    }
}
