class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        if (nums == null || nums.length < 4)
            return new ArrayList<>();
        

        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        int length = nums.length;

        for(int i=0; i<length-3; i++){
            if (i > 0 && nums[i] == nums[i - 1])  // Avoid duplicates
                continue;

            for(int j=i+1; j<length-2; j++){
                if (j > i+1 && nums[j] == nums[j - 1])  // Avoid duplicates
                    continue;

                int low = j+1, high = length-1;

                // int difference =target - nums[i] - nums[j];

                while(low<high){
                    //to handlecornercase like INT limit exceeding    
                    long sum = (long) nums[i]+nums[j]+nums[low]+nums[high];
                    if(sum == target){
                        res.add(Arrays.asList(nums[i], nums[j], nums[low], nums[high]));

                        //avoid duplicates
                        while(low<high && nums[low] == nums[low+1]) low++; 
                        while(low<high && nums[high] == nums[high-1]) high--;

                        low++;
                        high--;
                    }else if(sum > target)
                        high--;
                    else
                        low++; 

                }
            }
        }

        return res;
    }
}
