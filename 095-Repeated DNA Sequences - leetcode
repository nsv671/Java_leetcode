//Naive solution
//time limit exceeding
//time complexcity = O(n^2)
//auxiliary space = O(N)

class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        List<String> res = new ArrayList<String>();

        if(s.length()<=10)
            return res;

        for(int i=0; i<s.length()-9; i++){
            String temp = s.substring(i, i+10);
            for(int j=i+1; j<s.length()-9; j++){
                String temp2 = s.substring(j,j+10);
                if(temp.equals(temp2) && !res.contains(temp)){
                    res.add(temp);
                    break;
                }
            }
        }
        
        return res;
    }
}

//using hashing

class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        List<String> res = new ArrayList<String>();
        HashSet<String> hs = new HashSet<String>();

        if(s.length()<=10)
            return res;

        for(int i=0; i<s.length()-9; i++){
            String temp = s.substring(i, i+10);
            if(hs.contains(temp)){
                if(!res.contains(temp))
                    res.add(temp);
            }else{
                hs.add(temp);
            }
        }
        
        return res;
    }
}
